/**
 * LLM-based English to Urdu translation
 * Supports Google Gemini and Llama models
 */

import { getLLMConfig, getBestAvailableModel, getAvailableModels } from './llm-config'

interface TranslationOptions {
  model?: 'gemini' | 'llama'
  temperature?: number
  maxTokens?: number
  retryAttempts?: number
}

export async function translateToUrdu(text: string, options: TranslationOptions = {}): Promise<string> {
  const config = getLLMConfig()
  const availableModels = getAvailableModels()
  
  // Use provided model or best available model
  const model = options.model || getBestAvailableModel()
  const temperature = options.temperature || config.temperature
  const maxTokens = options.maxTokens || config.maxTokens
  const retryAttempts = options.retryAttempts || config.retryAttempts
  
  if (!model) {
    console.warn('No LLM APIs available, using fallback translation')
    return fallbackTranslation(text)
  }
  
  if (!availableModels.includes(model)) {
    console.error(`Model ${model} not available. Available models:`, availableModels)
    return fallbackTranslation(text)
  }
  
  // Retry logic
  for (let attempt = 0; attempt <= retryAttempts; attempt++) {
    try {
      if (model === 'gemini') {
        return await translateWithGemini(text, temperature, maxTokens)
      } else if (model === 'llama') {
        return await translateWithLlama(text, temperature, maxTokens)
      }
      
      throw new Error(`Unsupported model: ${model}`)
    } catch (error) {
      console.error(`Translation attempt ${attempt + 1} failed:`, error)
      
      if (attempt === retryAttempts) {
        console.error('All translation attempts failed, using fallback')
        return config.enableFallback ? fallbackTranslation(text) : text
      }
      
      // Wait before retry (exponential backoff)
      await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000))
    }
  }
  
  return fallbackTranslation(text)
}

/**
 * Google Gemini translation
 */
async function translateWithGemini(text: string, temperature: number, maxTokens: number): Promise<string> {
  const apiKey = process.env.GEMINI_API_KEY
  
  if (!apiKey) {
    throw new Error('GEMINI_API_KEY not found in environment variables')
  }
  
  const prompt = `You are an expert English to Urdu translator. Translate the following English text to Urdu. 
  
Rules:
- Maintain the original meaning and context
- Use proper Urdu grammar and sentence structure
- Keep technical terms appropriately translated or transliterated
- Preserve the tone and style of the original text
- Return only the Urdu translation, no additional text

English text to translate:
${text}

Urdu translation:`

  const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      contents: [{
        parts: [{
          text: prompt
        }]
      }],
      generationConfig: {
        temperature,
        maxOutputTokens: maxTokens,
      }
    })
  })

  if (!response.ok) {
    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`)
  }

  const data = await response.json()
  
  if (!data.candidates || data.candidates.length === 0) {
    throw new Error('No translation generated by Gemini')
  }

  const translatedText = data.candidates[0].content.parts[0].text.trim()
  return translatedText
}

/**
 * Llama translation (using Groq API for fast inference)
 */
async function translateWithLlama(text: string, temperature: number, maxTokens: number): Promise<string> {
  const apiKey = process.env.GROQ_API_KEY
  
  if (!apiKey) {
    throw new Error('GROQ_API_KEY not found in environment variables')
  }
  
  const prompt = `You are an expert English to Urdu translator. Translate the following English text to Urdu accurately while maintaining the original meaning and context.

Rules:
- Provide natural, fluent Urdu translation
- Maintain proper grammar and sentence structure
- Keep technical terms appropriately translated
- Preserve the original tone and meaning
- Return only the Urdu translation

English text: ${text}

Urdu translation:`

  const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'llama-3.1-8b-instant', // Fast Llama model
      messages: [
        {
          role: 'system',
          content: 'You are an expert English to Urdu translator. Provide accurate, natural translations while maintaining the original meaning and context.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature,
      max_tokens: maxTokens,
    })
  })

  if (!response.ok) {
    throw new Error(`Groq API error: ${response.status} ${response.statusText}`)
  }

  const data = await response.json()
  
  if (!data.choices || data.choices.length === 0) {
    throw new Error('No translation generated by Llama')
  }

  const translatedText = data.choices[0].message.content.trim()
  return translatedText
}

/**
 * Fallback dictionary-based translation for when LLM APIs fail
 */
function fallbackTranslation(text: string): string {
  console.warn('Using fallback dictionary translation')
  
  const words = text.toLowerCase().split(/\s+/)
  const translatedWords = words.map((word) => {
    return englishToUrduDict[word] || word
  })

  return translatedWords.join(" ")
}

// Basic dictionary for fallback (simplified version)
const englishToUrduDict: Record<string, string> = {
  // Common words
  the: "یہ",
  and: "اور",
  is: "ہے",
  are: "ہیں",
  was: "تھا",
  were: "تھے",
  will: "گا",
  be: "ہونا",
  have: "ہے",
  has: "ہے",
  had: "تھا",
  
  // Pronouns
  i: "میں",
  you: "آپ",
  he: "وہ",
  she: "وہ",
  it: "یہ",
  we: "ہم",
  they: "وہ",
  this: "یہ",
  that: "وہ",
  
  // Common nouns
  blog: "بلاگ",
  article: "مضمون",
  summary: "خلاصہ",
  content: "مواد",
  text: "متن",
  information: "معلومات",
  data: "ڈیٹا",
  website: "ویب سائٹ",
  page: "صفحہ",
  user: "صارف",
  
  // Verbs
  read: "پڑھنا",
  write: "لکھنا",
  create: "بنانا",
  make: "بنانا",
  get: "حاصل کرنا",
  give: "دینا",
  take: "لینا",
  go: "جانا",
  come: "آنا",
  see: "دیکھنا",
  
  // Adjectives
  good: "اچھا",
  bad: "برا",
  big: "بڑا",
  small: "چھوٹا",
  new: "نیا",
  old: "پرانا",
  important: "اہم",
  useful: "مفید",
  easy: "آسان",
  difficult: "مشکل",
}
